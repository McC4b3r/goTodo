/* tslint:disable */
/* eslint-disable */
/**
 * go_app/v1/api.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RpcStatus,
  V1DeleteTodosResponse,
  V1Todos,
  V1UpsertTodosRequest,
} from '../models/index';
import {
    RpcStatusFromJSON,
    RpcStatusToJSON,
    V1DeleteTodosResponseFromJSON,
    V1DeleteTodosResponseToJSON,
    V1TodosFromJSON,
    V1TodosToJSON,
    V1UpsertTodosRequestFromJSON,
    V1UpsertTodosRequestToJSON,
} from '../models/index';

export interface ApiDeleteTodosRequest {
    ids?: Array<string>;
}

export interface ApiGetTodosRequest {
    ids?: Array<string>;
}

export interface ApiListTodosRequest {
    limit?: number;
    offset?: number;
    orderBy?: string;
}

export interface ApiUpsertTodosRequest {
    body: V1UpsertTodosRequest;
}

/**
 * ApiApi - interface
 * 
 * @export
 * @interface ApiApiInterface
 */
export interface ApiApiInterface {
    /**
     * 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiDeleteTodosRaw(requestParameters: ApiDeleteTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteTodosResponse>>;

    /**
     */
    apiDeleteTodos(requestParameters: ApiDeleteTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteTodosResponse>;

    /**
     * 
     * @param {Array<string>} [ids] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiGetTodosRaw(requestParameters: ApiGetTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Todos>>;

    /**
     */
    apiGetTodos(requestParameters: ApiGetTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Todos>;

    /**
     * 
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiHealthyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Health check
     */
    apiHealthy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {string} [orderBy] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiListTodosRaw(requestParameters: ApiListTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Todos>>;

    /**
     */
    apiListTodos(requestParameters: ApiListTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Todos>;

    /**
     * 
     * @summary Readiness check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiReadyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>>;

    /**
     * Readiness check
     */
    apiReady(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object>;

    /**
     * 
     * @param {V1UpsertTodosRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApiInterface
     */
    apiUpsertTodosRaw(requestParameters: ApiUpsertTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Todos>>;

    /**
     */
    apiUpsertTodos(requestParameters: ApiUpsertTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Todos>;

}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI implements ApiApiInterface {

    /**
     */
    async apiDeleteTodosRaw(requestParameters: ApiDeleteTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1DeleteTodosResponse>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/todos`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DeleteTodosResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiDeleteTodos(requestParameters: ApiDeleteTodosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1DeleteTodosResponse> {
        const response = await this.apiDeleteTodosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiGetTodosRaw(requestParameters: ApiGetTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Todos>> {
        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/todos/get`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TodosFromJSON(jsonValue));
    }

    /**
     */
    async apiGetTodos(requestParameters: ApiGetTodosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Todos> {
        const response = await this.apiGetTodosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Health check
     */
    async apiHealthyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/healthy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Health check
     */
    async apiHealthy(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiHealthyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiListTodosRaw(requestParameters: ApiListTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Todos>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['orderBy'] = requestParameters['orderBy'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/todos/list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TodosFromJSON(jsonValue));
    }

    /**
     */
    async apiListTodos(requestParameters: ApiListTodosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Todos> {
        const response = await this.apiListTodosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Readiness check
     */
    async apiReadyRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ready`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Readiness check
     */
    async apiReady(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.apiReadyRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async apiUpsertTodosRaw(requestParameters: ApiUpsertTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<V1Todos>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling apiUpsertTodos().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/todos`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: V1UpsertTodosRequestToJSON(requestParameters['body']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TodosFromJSON(jsonValue));
    }

    /**
     */
    async apiUpsertTodos(requestParameters: ApiUpsertTodosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<V1Todos> {
        const response = await this.apiUpsertTodosRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
