// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: go_app/v1/api.proto

package go_appv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Api_Healthy_FullMethodName     = "/go_app.v1.Api/Healthy"
	Api_Ready_FullMethodName       = "/go_app.v1.Api/Ready"
	Api_UpsertTodos_FullMethodName = "/go_app.v1.Api/UpsertTodos"
	Api_DeleteTodos_FullMethodName = "/go_app.v1.Api/DeleteTodos"
	Api_ListTodos_FullMethodName   = "/go_app.v1.Api/ListTodos"
	Api_GetTodos_FullMethodName    = "/go_app.v1.Api/GetTodos"
)

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiClient interface {
	// Health check
	Healthy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Readiness check
	Ready(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	UpsertTodos(ctx context.Context, in *UpsertTodosRequest, opts ...grpc.CallOption) (*Todos, error)
	DeleteTodos(ctx context.Context, in *DeleteTodosRequest, opts ...grpc.CallOption) (*DeleteTodosResponse, error)
	ListTodos(ctx context.Context, in *ListTodosRequest, opts ...grpc.CallOption) (*Todos, error)
	GetTodos(ctx context.Context, in *GetTodosRequest, opts ...grpc.CallOption) (*Todos, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) Healthy(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Api_Healthy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Ready(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Api_Ready_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) UpsertTodos(ctx context.Context, in *UpsertTodosRequest, opts ...grpc.CallOption) (*Todos, error) {
	out := new(Todos)
	err := c.cc.Invoke(ctx, Api_UpsertTodos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteTodos(ctx context.Context, in *DeleteTodosRequest, opts ...grpc.CallOption) (*DeleteTodosResponse, error) {
	out := new(DeleteTodosResponse)
	err := c.cc.Invoke(ctx, Api_DeleteTodos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ListTodos(ctx context.Context, in *ListTodosRequest, opts ...grpc.CallOption) (*Todos, error) {
	out := new(Todos)
	err := c.cc.Invoke(ctx, Api_ListTodos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetTodos(ctx context.Context, in *GetTodosRequest, opts ...grpc.CallOption) (*Todos, error) {
	out := new(Todos)
	err := c.cc.Invoke(ctx, Api_GetTodos_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiServer is the server API for Api service.
// All implementations should embed UnimplementedApiServer
// for forward compatibility
type ApiServer interface {
	// Health check
	Healthy(context.Context, *Empty) (*Empty, error)
	// Readiness check
	Ready(context.Context, *Empty) (*Empty, error)
	UpsertTodos(context.Context, *UpsertTodosRequest) (*Todos, error)
	DeleteTodos(context.Context, *DeleteTodosRequest) (*DeleteTodosResponse, error)
	ListTodos(context.Context, *ListTodosRequest) (*Todos, error)
	GetTodos(context.Context, *GetTodosRequest) (*Todos, error)
}

// UnimplementedApiServer should be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (UnimplementedApiServer) Healthy(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthy not implemented")
}
func (UnimplementedApiServer) Ready(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedApiServer) UpsertTodos(context.Context, *UpsertTodosRequest) (*Todos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertTodos not implemented")
}
func (UnimplementedApiServer) DeleteTodos(context.Context, *DeleteTodosRequest) (*DeleteTodosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodos not implemented")
}
func (UnimplementedApiServer) ListTodos(context.Context, *ListTodosRequest) (*Todos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTodos not implemented")
}
func (UnimplementedApiServer) GetTodos(context.Context, *GetTodosRequest) (*Todos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodos not implemented")
}

// UnsafeApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiServer will
// result in compilation errors.
type UnsafeApiServer interface {
	mustEmbedUnimplementedApiServer()
}

func RegisterApiServer(s grpc.ServiceRegistrar, srv ApiServer) {
	s.RegisterService(&Api_ServiceDesc, srv)
}

func _Api_Healthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Healthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_Healthy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Healthy(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_Ready_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Ready(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_UpsertTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertTodosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).UpsertTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_UpsertTodos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).UpsertTodos(ctx, req.(*UpsertTodosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_DeleteTodos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteTodos(ctx, req.(*DeleteTodosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ListTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTodosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ListTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_ListTodos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ListTodos(ctx, req.(*ListTodosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Api_GetTodos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetTodos(ctx, req.(*GetTodosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Api_ServiceDesc is the grpc.ServiceDesc for Api service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Api_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "go_app.v1.Api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Healthy",
			Handler:    _Api_Healthy_Handler,
		},
		{
			MethodName: "Ready",
			Handler:    _Api_Ready_Handler,
		},
		{
			MethodName: "UpsertTodos",
			Handler:    _Api_UpsertTodos_Handler,
		},
		{
			MethodName: "DeleteTodos",
			Handler:    _Api_DeleteTodos_Handler,
		},
		{
			MethodName: "ListTodos",
			Handler:    _Api_ListTodos_Handler,
		},
		{
			MethodName: "GetTodos",
			Handler:    _Api_GetTodos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "go_app/v1/api.proto",
}
